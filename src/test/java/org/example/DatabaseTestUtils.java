package org.example;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class DatabaseTestUtils {

    public static void setupTestDatabase(Connection connection) throws Exception {
        // Najpierw usuń tabele jeśli istnieją (w odpowiedniej kolejności - foreign keys)
        dropTableIfExists(connection, "ZLECENIA");
        dropTableIfExists(connection, "RAPORTY_TRAS");
        dropTableIfExists(connection, "INCYDENTY");
        dropTableIfExists(connection, "POJAZDY");
        dropTableIfExists(connection, "UZYTKOWNIK");

        // Create tables
        connection.createStatement().execute(
                "CREATE TABLE UZYTKOWNIK (" +
                        "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "imie VARCHAR2(50), " +
                        "nazwisko VARCHAR2(50), " +
                        "login VARCHAR2(50) UNIQUE, " +
                        "haslo VARCHAR2(100), " +
                        "rola VARCHAR2(20)" +
                        ")"
        );

        connection.createStatement().execute(
                "CREATE TABLE POJAZDY (" +
                        "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "marka VARCHAR2(50), " +
                        "model VARCHAR2(50), " +
                        "rejestracja VARCHAR2(20), " +
                        "status VARCHAR2(20), " +
                        "uwagi VARCHAR2(500), " +
                        "kierowca_id NUMBER" +
                        ")"
        );

        connection.createStatement().execute(
                "CREATE TABLE ZLECENIA (" +
                        "id_zlecenia NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "nadawca_id NUMBER, " +
                        "odbiorca VARCHAR2(100), " +
                        "adres VARCHAR2(200), " +
                        "miasto VARCHAR2(50), " +
                        "kod_pocztowy VARCHAR2(10), " +
                        "opis VARCHAR2(500), " +
                        "waga NUMBER(10,2), " +
                        "data_nadania DATE, " +
                        "status VARCHAR2(50), " +
                        "pojazd_id NUMBER, " +
                        "kierowca_id NUMBER" +
                        ")"
        );

        connection.createStatement().execute(
                "CREATE TABLE INCYDENTY (" +
                        "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "typ_incydentu VARCHAR2(100), " +
                        "lokalizacja VARCHAR2(200), " +
                        "opis_incydentu VARCHAR2(1000), " +
                        "data_zgloszenia TIMESTAMP, " +
                        "status VARCHAR2(20)" +
                        ")"
        );

        connection.createStatement().execute(
                "CREATE TABLE RAPORTY_TRAS (" +
                        "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "kilometry NUMBER, " +
                        "spalanie NUMBER(5,2), " +
                        "raport VARCHAR2(1000), " +
                        "data_zakonczenia TIMESTAMP" +
                        ")"
        );
    }

    public static void insertTestData(Connection connection) throws Exception {
        // Insert test users
        PreparedStatement stmt = connection.prepareStatement(
                "INSERT INTO UZYTKOWNIK (id, imie, nazwisko, login, haslo, rola) VALUES (DEFAULT, ?, ?, ?, ?, ?)"
        );

        stmt.setString(1, "Jan");
        stmt.setString(2, "Kowalski");
        stmt.setString(3, "jkowalski");
        stmt.setString(4, "password123");
        stmt.setString(5, "KLIENT");
        stmt.executeUpdate();

        stmt.setString(1, "Anna");
        stmt.setString(2, "Nowak");
        stmt.setString(3, "anowak");
        stmt.setString(4, "password456");
        stmt.setString(5, "KURIER");
        stmt.executeUpdate();

        stmt.setString(1, "Piotr");
        stmt.setString(2, "Wiśniewski");
        stmt.setString(3, "pwisniewski");
        stmt.setString(4, "password789");
        stmt.setString(5, "LOGISTYK");
        stmt.executeUpdate();

        // Insert test vehicles
        PreparedStatement pojStmt = connection.prepareStatement(
                "INSERT INTO POJAZDY (id, marka, model, rejestracja, status, uwagi, kierowca_id) VALUES (DEFAULT, ?, ?, ?, ?, ?, NULL)"
        );

        pojStmt.setString(1, "Mercedes");
        pojStmt.setString(2, "Sprinter");
        pojStmt.setString(3, "WA12345");
        pojStmt.setString(4, "Dostepny");
        pojStmt.setString(5, "Pojazd w dobrym stanie");
        pojStmt.executeUpdate();

        pojStmt.setString(1, "Ford");
        pojStmt.setString(2, "Transit");
        pojStmt.setString(3, "WA67890");
        pojStmt.setString(4, "Zajety");
        pojStmt.setString(5, "");
        pojStmt.executeUpdate();

        stmt.close();
        pojStmt.close();

        // Zatwierdzenie transakcji
        connection.commit();
    }

    private static void dropTableIfExists(Connection connection, String tableName) {
        try {
            // Sprawdź czy tabela istnieje
            PreparedStatement checkStmt = connection.prepareStatement(
                    "SELECT COUNT(*) FROM USER_TABLES WHERE table_name = ?"
            );
            checkStmt.setString(1, tableName);
            ResultSet rs = checkStmt.executeQuery();
            rs.next();

            if (rs.getInt(1) > 0) {
                // Tabela istnieje, usuń ją
                connection.createStatement().execute("DROP TABLE " + tableName + " CASCADE CONSTRAINTS");
                System.out.println("Usunięto tabelę: " + tableName);
            }

            rs.close();
            checkStmt.close();
        } catch (Exception e) {
            // Ignoruj błędy - tabela prawdopodobnie nie istnieje
            System.out.println("Nie można usunąć tabeli " + tableName + ": " + e.getMessage());
        }
    }

    // Metoda pomocnicza do czyszczenia bazy po testach
    public static void cleanupTestDatabase(Connection connection) throws Exception {
        dropTableIfExists(connection, "ZLECENIA");
        dropTableIfExists(connection, "RAPORTY_TRAS");
        dropTableIfExists(connection, "INCYDENTY");
        dropTableIfExists(connection, "POJAZDY");
        dropTableIfExists(connection, "UZYTKOWNIK");
        connection.commit();
    }
}